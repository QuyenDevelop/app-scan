import { shipmentApi } from "@api";
import { Header } from "@components";
import { DATA_CONSTANT, SCREENS } from "@configs";
import { Alert } from "@helpers";
import {
  CustomerResponse,
  ExploitShipmentImage,
  ShipmentImages,
  ShipmentResponse,
  SubShipment,
  SubShipmentViewModel,
} from "@models";
import {
  FeedbackStackList,
  goToAddExploitPhotosScreen,
  goToScanShipmentCodeScreen,
} from "@navigation";
import { RouteProp, useNavigation, useRoute } from "@react-navigation/native";
import { IRootState } from "@redux";
import { Button, translate } from "@shared";
import { Themes } from "@themes";
import React, {
  FunctionComponent,
  useCallback,
  useEffect,
  useState,
} from "react";
import {
  FlatList,
  ScrollView,
  Text,
  TextInput,
  TouchableWithoutFeedback,
  View,
} from "react-native";
import { useSelector } from "react-redux";
import { PhotoModal } from "../Scan/components/PhotoModal";
import { ShipmentInfo } from "./components/ShipmentInfo";
import { ShipmentPhotoList } from "./components/ShipmentPhotoList";
import { ShipmentHeader } from "./components/ShipmentTitle";
import styles from "./styles";

type NavigationRoute = RouteProp<FeedbackStackList, SCREENS.FEED_BACK_SCREEN>;
export interface FeedbackParams {
  item: ShipmentResponse;
}
export const FeedbackScreen: FunctionComponent = () => {
  const routeNavigation = useRoute<NavigationRoute>();
  const navigation = useNavigation();
  const { item } = routeNavigation?.params;
  const [itemStatus] = useState(
    DATA_CONSTANT.SHIPMENT_STATUS.filter(i => i.key === item.Status),
  );
  console.log("🚀🚀🚀 => itemStatus", itemStatus);
  const [isShowPhotoModal, setShowPhotoModal] = useState(false);
  const [images, setImages] = useState<Array<ShipmentImages>>([]);
  const [subShipments, setSubShipments] = useState<Array<SubShipment>>([
    { Length: 0, Width: 0, Height: 0, TotalGrossWeight: 0, LocationName: "" },
  ]);
  const postOffices = useSelector((state: IRootState) => state.account.profile);
  const userInfo = useSelector((state: IRootState) => state.account.profile);
  const [customerTitle, setCustomerTitles] = useState<String>(
    item.CustomerName,
  );
  const [customerID, setCustomerID] = useState<string>(item.CustomerId);
  const [isLoading, setIsLoading] = useState(false);
  const [customer, setCustomer] = useState<CustomerResponse | undefined>();
  const [description, setDescription] = useState("");

  useEffect(() => {
    shipmentApi
      .getShipmentById({
        shipmentId: item.ShipmentId,
      })
      ?.then(response => {
        if (response?.success) {
          setImages(response.data.Images);
          setSubShipments(response.data.SubShipments);
          setDescription(response.data.Note);
        }
      });
  }, []);

  const updateInfoSubShipment = useCallback(
    (subShipment: SubShipment, index: number) => {
      const newSub = [...subShipments];
      newSub[index] = subShipment;
      setSubShipments(newSub);
    },
    [subShipments],
  );
  const updatePhotoList = useCallback(
    (photos: Array<ShipmentImages>, imgList?: Array<ShipmentImages>) => {
      // ---- case have initialState == Delete item
      // ---- else == Add item
      const newSub = imgList ? imgList.concat(photos) : photos;
      setImages(newSub);
    },
    [images],
  );

  const updateCustomer = useCallback((custom: CustomerResponse) => {
    setCustomer(custom);
    setCustomerTitles(custom.Name);
    setCustomerID(custom.Id);
  }, []);

  const onViewImage = () => {
    goToAddExploitPhotosScreen({
      shipmentId: item.ShipmentId,
      images: images,
      updateImagesList: updatePhotoList,
    });
  };

  const RenderButton = () => {
    return (
      <View>
        <Button
          isLoading={isLoading}
          title={translate("button.send")}
          onPress={() => toggleSend()}
          buttonChildStyle={styles.updateButton}
        />
      </View>
    );
  };

  // ---- toggle send - chờ có API
  const toggleSend = () => {
    const imagesExploit = images.map(
      (image: ShipmentImages): ExploitShipmentImage => {
        return {
          name: image.Name,
          url: image.Url,
        };
      },
    );
    // TODO: check if customer && alert waring
    if (!customerID) {
      Alert.error("error.validation.customer");
      return;
    }
    // TODO: check if Total weight == 0 alert waring
    const checkTotalWeight = subShipments.filter(
      shipment => shipment.TotalGrossWeight === 0,
    );
    if (checkTotalWeight.length > 0) {
      Alert.error("error.validation.images");
      return;
    }
    // TODO: check if ImagesList && alert waring
    if (!imagesExploit.length) {
      Alert.error("error.validation.images");
      return;
    }
    const subShipmentRequest = subShipments.map(
      (subShipment: SubShipment): SubShipmentViewModel => {
        return {
          id: subShipment.Id,
          shipmentId: subShipment.ShipmentId,
          length: subShipment.Length || 0,
          width: subShipment.Width || 0,
          height: subShipment.Height || 0,
          totalGrossWeight: subShipment.TotalGrossWeight * 1000,
          status: 0,
          subShipmentNumber: subShipment.SubShipmentNumber,
          referenceNumber: subShipment.ReferenceNumber,
          locationName: subShipment.LocationName,
          totalChargeableWeight: subShipment.TotalChargeableWeight,
          orderNumber: subShipment.OrderNumber,
        };
      },
    );

    setIsLoading(true);
    shipmentApi
      .exploitShipment({
        id: item.ShipmentId,
        customerId: customerID || "",
        postOfficeToSendId: postOffices?.postOfficeId || "",
        images: imagesExploit,
        expectedPieces: 1,
        pieces: 1,
        subShipmentViewModels: subShipmentRequest,
        note: description,
        createdBy: userInfo?.sub || "",
        createdByUserName: userInfo?.preferred_username || "",
      })
      ?.then(response => {
        if (response.Status) {
          Alert.success("success.success");
          goToScanShipmentCodeScreen();
        }
      })
      .catch(() => Alert.error("error.errorSever"))
      .finally(() => {
        setIsLoading(false);
      });
  };
  const keyExtractor = useCallback(
    (item: SubShipment, index: number) => `${item.ShipmentId}_${index}`,
    [],
  );
  const renderItem = useCallback(
    ({ item, index }: { item: SubShipment; index: number }) => {
      return (
        <ShipmentInfo
          subShipment={item}
          index={index}
          updateSubShipment={updateInfoSubShipment}
        />
      );
    },
    [updateInfoSubShipment],
  );

  return (
    <>
      <Header
        title={translate("screens.complaint")}
        iconLeftName={["ic_arrow_left"]}
        iconLeftOnPress={[() => navigation.goBack()]}
        isCenterTitle
        titleColor={Themes.colors.white}
      />
      <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
        <TouchableWithoutFeedback>
          <>
            <ShipmentHeader
              shipmentTitle={item.ShipmentNumber}
              customerTitle={customerTitle}
              customer={customer}
              selectCustomer={updateCustomer}
            />
            <View style={styles.statusContainer}>
              <Text style={styles.labelInfo}>{translate("label.status")}</Text>
              <Text style={styles.statusValue}>
                {translate(itemStatus[0]?.value, true)}
              </Text>
            </View>
            <ShipmentPhotoList
              // shipment={shipmentDetail}
              images={images}
              showPhotoModal={() => setShowPhotoModal(true)}
              onViewImage={onViewImage}
            />
            <FlatList
              data={subShipments}
              keyExtractor={keyExtractor}
              renderItem={renderItem}
            />
            <View style={[styles.subShipmentContainer, styles.boxShipmentIfo]}>
              <Text style={styles.labelInfo}>
                {translate("placeholder.enterContent")}
              </Text>
              <TextInput
                style={styles.NoteInput}
                contextMenuHidden={true}
                placeholder={translate("placeholder.enterContent")}
                onChangeText={(text: string) => {
                  setDescription(text);
                }}
                value={description || ""}
                multiline={true}
              />
            </View>
            <RenderButton />
          </>
        </TouchableWithoutFeedback>
        <PhotoModal
          isShowModal={isShowPhotoModal}
          closeModal={() => setShowPhotoModal(false)}
          shipment={item.ShipmentId}
          reUpdateImagesList={updatePhotoList}
          images={images}
        />
      </ScrollView>
    </>
  );
};
