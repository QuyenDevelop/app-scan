import { shipmentApi } from "@api";
import { Header } from "@components";
import { SCREENS } from "@configs";
import { CustomerResponse, ShipmentResponse, SubShipment } from "@models";
import {
  FeedbackStackList,
  goToAddExploitPhotosScreen,
  goToScanShipmentCodeScreen,
} from "@navigation";
import { RouteProp, useNavigation, useRoute } from "@react-navigation/native";
import { Button, translate } from "@shared";
import { Themes } from "@themes";
import React, {
  FunctionComponent,
  useCallback,
  useEffect,
  useState,
} from "react";
import {
  ScrollView,
  Text,
  TextInput,
  TouchableWithoutFeedback,
  View,
} from "react-native";
import { PhotoModal } from "../Scan/components/PhotoModal";
import { ShipmentInfo } from "./components/ShipmentInfo";
import { ShipmentPhotoList } from "./components/ShipmentPhotoList";
import { ShipmentHeader } from "./components/ShipmentTitle";
import styles from "./styles";

type NavigationRoute = RouteProp<FeedbackStackList, SCREENS.FEED_BACK_SCREEN>;
export interface FeedbackParams {
  item: ShipmentResponse;
}
export const FeedbackScreen: FunctionComponent = () => {
  const routeNavigation = useRoute<NavigationRoute>();
  const navigation = useNavigation();
  const { item } = routeNavigation?.params;
  const [isShowPhotoModal, setShowPhotoModal] = useState(false);
  const [images, setImages] = useState<
    Array<{
      Id?: string;
      Name: string;
      Url: string;
      RefId?: string;
      OriginSize?: string;
    }>
  >([]);
  const [subShipments, setSubShipments] = useState<Array<SubShipment>>([
    { Length: 0, Width: 0, Height: 0, TotalGrossWeight: 0, LocationName: "" },
  ]);
  const [customer, setCustomer] = useState<CustomerResponse | undefined>();
  const [description, setDescription] = useState("");

  useEffect(() => {
    getSubShipments();
    getShipmentItems();
  }, []);

  // call api Get Shipment Detail => List Image
  const getShipmentItems = () => {
    shipmentApi
      .getDetailShipment({
        shipmentId: item.ShipmentId,
        option: 3,
      })
      ?.then(response => {
        if (
          response &&
          response.success &&
          response.data.ShipmentItems[0].Images.length
        ) {
          response.data.ShipmentItems[0].Images.slice(-5).map(img => {
            setImages(i => [
              ...i,
              {
                Id: img.Id,
                Name: img.Name,
                Url: img.Url,
              },
            ]);
          });
        } else {
          setImages([]);
        }
      });
  };

  const updateInfoSubShipment = useCallback(
    (subShipment: SubShipment, index: 0) => {
      const newSub = [...subShipments];
      newSub[index] = subShipment;
      setSubShipments(newSub);
    },
    [subShipments],
  );
  const updatePhotoList = useCallback(
    (
      photos: Array<{ Id?: string; Name: string; Url: string }>,
      imgList?: Array<{ Id?: string; Name: string; Url: string }>,
    ) => {
      console.log("photo: " + JSON.stringify(images));

      // ---- trường hợp nếu initialState k được truyền == Delete item
      // ---- trường hợp nếu initialState được truyền == Add item
      const newSub = imgList ? imgList.concat(photos) : photos;
      setImages(newSub.slice(-5));
    },
    [],
  );

  const updateCustomer = useCallback((custom: CustomerResponse) => {
    setCustomer(custom);
  }, []);

  const getSubShipments = () => {
    shipmentApi
      .getDetailShipment({
        shipmentId: item.ShipmentId,
        option: 2,
      })
      ?.then(response => {
        if (
          response &&
          response.success &&
          response.data.SubShipments.length > 0
        ) {
          setSubShipments(response.data.SubShipments);
        }
      });
  };

  const onViewImage = () => {
    goToAddExploitPhotosScreen({
      shipmentId: item.ShipmentId,
      images: images,
      updateImagesList: updatePhotoList,
    });
  };

  const RenderButton = () => {
    return (
      <View>
        <Button
          title={translate("button.send")}
          onPress={() => toggleSend()}
          buttonChildStyle={styles.updateButton}
        />
      </View>
    );
  };

  // ---- toggle send - chờ có API
  const toggleSend = () => {
    const data = {
      ShipmentId: item.ShipmentId,
      Images: images,
      Length: subShipments[0].Length,
      Width: subShipments[0].Width,
      Height: subShipments[0].Height,
      Weight: subShipments[0].TotalGrossWeight,
      Location: subShipments[0].LocationName,
      description: description,
    };

    console.log("data: " + JSON.stringify(data));

    goToScanShipmentCodeScreen();
  };

  return (
    <>
      <Header
        title={translate("screens.shipmentDetail")}
        iconLeftName={["ic_arrow_left"]}
        iconLeftOnPress={[() => navigation.goBack()]}
        isCenterTitle
        titleColor={Themes.colors.white}
      />
      <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
        <TouchableWithoutFeedback>
          <>
            <ShipmentHeader
              shipmentTitle={item.ShipmentNumber}
              customer={customer}
              selectCustomer={updateCustomer}
            />
            <ShipmentPhotoList
              // shipment={shipmentDetail}
              images={images}
              showPhotoModal={() => setShowPhotoModal(true)}
              onViewImage={onViewImage}
            />
            <ShipmentInfo
              subShipment={subShipments[0]}
              updateSubShipment={updateInfoSubShipment}
            />
            <View style={[styles.subShipmentContainer, styles.boxShipmentIfo]}>
              <Text style={styles.labelInfo}>
                {translate("placeholder.enterContent")}
              </Text>
              <TextInput
                style={styles.NoteInput}
                contextMenuHidden={true}
                placeholder={translate("placeholder.enterContent")}
                onChangeText={(text: string) => {
                  setDescription(text);
                }}
                value={description || ""}
                multiline={true}
              />
            </View>
            <RenderButton />
          </>
        </TouchableWithoutFeedback>
        <PhotoModal
          isShowModal={isShowPhotoModal}
          closeModal={() => setShowPhotoModal(false)}
          shipment={item.ShipmentId}
          reUpdateImagesList={updatePhotoList}
          images={images}
        />
      </ScrollView>
    </>
  );
};
